name: Release (Windows, Nuitka)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "patch | minor | major"
        required: true
        default: "patch"
      preid:
        description: "optional prerelease id (e.g. beta, rc). leave blank for stable"
        required: false
  push:
    branches: [ main ]
    paths:
      - "revanced_gui.py"
      - ".github/workflows/release-windows.yml"
      - "requirements.txt"

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute next tag (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force --prune
          LAST_TAG="$(git tag --list 'v*' --sort=-v:refname | head -n 1 || true)"
          if [[ -z "${LAST_TAG}" ]]; then LAST_TAG="v0.0.0"; fi
          ver="${LAST_TAG#v}"
          IFS='.' read -r MA MI PA <<<"${ver}"
          case "${{ github.event.inputs.release_type }}" in
            patch) ((PA=PA+1));;
            minor) ((MI=MI+1)); PA=0;;
            major) ((MA=MA+1)); MI=0; PA=0;;
            *) echo "invalid release_type"; exit 1;;
          esac
          NEXT="v${MA}.${MI}.${PA}"
          if [[ -n "${{ github.event.inputs.preid }}" ]]; then
            NEXT="${NEXT}-${{ github.event.inputs.preid }}.${GITHUB_RUN_NUMBER}"
          fi
          echo "NEXT_TAG=${NEXT}" >> "$GITHUB_ENV"

      - name: Create & push tag (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "${NEXT_TAG}" -m "Release ${NEXT_TAG}"
          git push origin "${NEXT_TAG}"

      - name: Set TAG env
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> "$GITHUB_ENV"
          else
            echo "TAG=${NEXT_TAG:-untagged}" >> "$GITHUB_ENV"
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -U nuitka==2.8.1 ordered-set zstandard pywin32-ctypes

      - name: Set up MSVC env
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Compute TAG and SAFE_VERSION
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          git fetch --tags --force --prune 2>$null
          if ($LASTEXITCODE -ne 0) { $global:LASTEXITCODE = 0 }

          $tag = "${{ env.TAG }}"

          if ([string]::IsNullOrWhiteSpace($tag) -or $tag -eq "untagged") {
            $last = git describe --tags --abbrev=0 2>$null
            if ($LASTEXITCODE -ne 0 -or [string]::IsNullOrWhiteSpace($last)) {
              $global:LASTEXITCODE = 0
              $yyMM = Get-Date -Format "yyMM"
              $ddHH = Get-Date -Format "ddHH"
              $tag  = "v0.0.$yyMM.$ddHH"
            } else {
              $tag = $last
            }
          }

          $ver = ($tag -replace '^v','') -replace '[^0-9\.]',''
          $rawParts = @()
          foreach ($p in ($ver -split '\.')) { if ($p -match '^\d+$') { $rawParts += $p } }
          $out = @(0,0,0,0)
          for ($i=0; $i -lt 4; $i++) {
            if ($i -lt $rawParts.Count) {
              $n = [int]$rawParts[$i]
              if ($n -gt 65535) { $n = 65535 }
              $out[$i] = $n
            }
          }
          $safe = ($out -join '.')

          "TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Append
          "SAFE_VERSION=$safe" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "TAG=$tag SAFE_VERSION=$safe"

          $global:LASTEXITCODE = 0

      - name: Build with Nuitka
        shell: pwsh
        run: >
          python -m nuitka revanced_gui.py
          --onefile
          --enable-plugin=pyside6
          --windows-console-mode=disable
          --msvc=latest
          --assume-yes-for-downloads
          --product-name="ReVanced GUI"
          --product-version="${env:SAFE_VERSION}"
          --file-version="${env:SAFE_VERSION}"
          --lto=yes
          --output-dir=dist

      - name: Show outputs
        shell: pwsh
        run: Get-ChildItem -Recurse dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ReVanced-GUI-win-${{ env.TAG }}
          path: dist/revanced_gui.exe

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          files: dist/revanced_gui.exe
          generate_release_notes: true
