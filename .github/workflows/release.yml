name: Release (Windows, Nuitka)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "patch | minor | major"
        required: true
        default: "patch"
      preid:
        description: "optional prerelease id (e.g. beta, rc). leave blank for stable"
        required: false

permissions:
  contents: write

concurrency:
  group: release-windows
  cancel-in-progress: false

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute next tag
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force --prune
          LAST_TAG="$(git tag --list 'v*' --sort=-v:refname | head -n 1 || true)"
          [[ -z "${LAST_TAG}" ]] && LAST_TAG="v0.0"
          raw="${LAST_TAG//$'\r'/}"
          raw="${raw#v}"
          raw="${raw%%-*}"
          MA=0; MI=0
          if [[ "$raw" =~ ^([0-9]+)\.([0-9]+)(\.[0-9]{4}\.[0-9]{4})?$ ]]; then
            MA="${BASH_REMATCH[1]}"
            MI="${BASH_REMATCH[2]}"
          else
            IFS='.' read -r _ma _mi _rest <<< "$raw"
            [[ "${_ma:-}" =~ ^[0-9]+$ ]] && MA="${_ma#0}" || MA=0
            [[ "${_mi:-}" =~ ^[0-9]+$ ]] && MI="${_mi#0}" || MI=0
          fi
          YYMM="$(date -u +%y%m)"
          DDHH="$(date -u +%d%H)"
          case "${{ github.event.inputs.release_type }}" in
            patch) ;;
            minor) ((MI++)) ;;
            major) ((MA++)); MI=0 ;;
            *) echo "invalid release_type"; exit 1 ;;
          esac
          NEXT="v${MA}.${MI}.${YYMM}.${DDHH}"
          if [[ -n "${{ github.event.inputs.preid }}" ]]; then
            NEXT="${NEXT}-${{ github.event.inputs.preid }}.${GITHUB_RUN_NUMBER}"
          fi
          {
            echo "NEXT_TAG=${NEXT}"
            echo "TAG=${NEXT}"
          } >> "$GITHUB_ENV"
          echo "Next tag: ${NEXT}"

      - name: Create & push tag (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          if git rev-parse -q --verify "refs/tags/${NEXT_TAG}" >/dev/null; then
            echo "Tag ${NEXT_TAG} already exists. Skipping creation."
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag -a "${NEXT_TAG}" -m "Release ${NEXT_TAG}"
            git push origin "${NEXT_TAG}"
          fi

      - name: Re-checkout at tag to lock source
        uses: actions/checkout@v4
        with:
          ref: ${{ env.NEXT_TAG }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -U nuitka==2.8.1 ordered-set zstandard pywin32-ctypes

      - name: Set up MSVC env
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Compute SAFE_VERSION (from TAG)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $tag = "${{ env.TAG }}"
          $ver = ($tag -replace '^v','') -replace '[^0-9\.]',''
          $rawParts = @()
          foreach ($p in ($ver -split '\.')) { if ($p -match '^\d+$') { $rawParts += $p } }
          $out = @(0,0,0,0)
          for ($i=0; $i -lt 4; $i++) {
            if ($i -lt $rawParts.Count) {
              $n = [int]$rawParts[$i]
              if ($n -gt 65535) { $n = 65535 }
              $out[$i] = $n
            }
          }
          $safe = ($out -join '.')
          "SAFE_VERSION=$safe" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "TAG=$tag SAFE_VERSION=$safe"

      - name: Build with Nuitka
        shell: pwsh
        run: >
          python -m nuitka revanced_gui.py
          --onefile
          --enable-plugin=pyside6
          --windows-console-mode=disable
          --msvc=latest
          --assume-yes-for-downloads
          --product-name="ReVanced GUI"
          --product-version="${env:SAFE_VERSION}"
          --file-version="${env:SAFE_VERSION}"
          --lto=yes
          --output-dir=dist

      - name: Show outputs
        shell: pwsh
        run: Get-ChildItem -Recurse dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ReVanced-GUI-win-${{ env.TAG }}
          path: dist/revanced_gui.exe

      - name: Create GitHub Release
        if: ${{ success() }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          files: dist/revanced_gui.exe
          generate_release_notes: true
